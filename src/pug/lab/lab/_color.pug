extends _html

block append vars
  -
    function range(n,min,max) { return Math.min(Math.max(n, min),max) }
    function colorRange(n,min=0,max=255) { return range(n,min,max) }
    function hexToInt(hex) { return colorRange(parseInt(hex, 16)); }
    function intToHex(int) { return colorRange(Math.floor(int)).toString(16).padStart(2, '0'); }

    function hexColor(c) { return intToHex(c[0])+intToHex(c[1])+intToHex(c[2]) }
    function rgbColor(hex) {
      if (hex.length === 6) {
        const r = hexToInt(hex.substring(0, 2));
        const g = hexToInt(hex.substring(2, 4));
        const b = hexToInt(hex.substring(4, 6));
        return [r, g, b];
      } else {
        throw new Error('Invalid hex color code');
      }
    }

    function getRGB(hex) {
      var rgb = [
        hexToInt(hex.substring(0, 2)),
        hexToInt(hex.substring(2, 4)),
        hexToInt(hex.substring(4, 6))
      ];
      return rgb
    }

    function changeHex(hex,lighten=0) {
      var rgb  = getRGB(hex);
      var lit  = range( lighten, 0, 100 )/100;
      var c = [];
      rgb.forEach(function(v, i, a) {
        if (lit < 0.5) {
          v = v *( 2 * lit )
        } else {
          v = v +( 255 - v ) * ( 2 * ( lit - 0.5 ) )
        }
        c[i] = intToHex ( colorRange(v) )
      });
      return c.join('');
    }

    function getColors(i,tc=0,z=['222222','dddddd']) {
      var bg = [
        z[0],
        changeHex( i, 20 ),
        changeHex( i, 30 ),
        changeHex( i, 40 ),
        i,
        changeHex( i, 60 ),
        changeHex( i, 70 ),
        changeHex( i, 80 ),
        z[1],
      ];
      var tc = [
        bg[5],
        bg[6],
        bg[7],
        changeHex( i, 90 ),
        'FFFFFF',
        changeHex( i, 20 +tc ),
        changeHex( i, 30 +tc ),
        changeHex( i, 40 +tc ),
        changeHex( i, 50 +tc ),
      ];

      return [ bg, tc ];
    }

//- ==============================================================
mixin colorCodes(r)
  -
    var bg = colors[r][0];
    var tc = colors[r][1];
    var cbg = bg[ Math.ceil(bg.length/2)-1 ];
    var ctc = tc[ Math.ceil(tc.length/2)-1 ];
  .codecolor._mt_2._small(style=`background-color: #${cbg}; color:#${ctc};`)|// #[span._uppercase ##{cbg}]
  ._flex._gap_a_x5
    ._fit: pre.colorcode._radius_x5r._pa._mv_x5r
      each v,i in bg
        = `$bg_${r+1}_${i+1} : #${v};`
        +l
      +nbsp
    ._fit: pre.colorcode._radius_x5r._pa._mv_x5r
      each v,i in tc
        = `$tc_${r+1}_${i+1} : #${v};`
        +l
      +nbsp
    //- ._fit: pre.colorcode._radius_x5r._pa._mv_x5r
      each v,i in bg
        = `._bg_${r+1}_${i+1} { background-color: $bg_${r+1}_${i+1} }`
        +l
      +nbsp
    //- ._fit: pre.colorcode._radius_x5r._pa._mv_x5r
      each v,i in bg
        = `._bc_${r+1}_${i+1} { border-color: $bg_${r+1}_${i+1} }`
        +l
      +nbsp
    //- ._fit: pre.colorcode._radius_x5r._pa._mv_x5r
      each v,i in tc
        = `._tc_${r+1}_${i+1} { color: $tc_${r+1}_${i+1} }`
        +l
      +nbsp

//- ==============================================================
mixin table(r)
  - var cols = colors[r][0].length;
  .grid(style=`grid-template-columns: repeat(${cols}, 1fr);`)
    - var c = 0;
    while c < cols
      - var bg = colors[r][0][c];
      - var tc = colors[r][1][c];
      .i(style=`background:#${bg};color:#${tc};`)
        |#[span #{bg}]#[br]#[span._b #{tc}]
      - c++;
    //- while
  //- grid

//- ==============================================================
mixin gradientColor(r)
  -
    var cols = colors[r][0].length;
    var _darkline  = 49;
    var _lightline = 100-_darkline;
    var _darkness  = intToHex(32);
    var _lightness = intToHex(32);
    var bgc = `bgc-${r}`;
  style.
    .#{bgc} {
      margin:0 auto;
      height: 10px;
    }
    .#{bgc} .gc {
      height:100%;
      background:
      linear-gradient(to right
        , #000000#{_darkness}
        , #000000#{_darkness} #{_darkline}%
        , #00000000 #{_darkline}%
        , #ffffff00 #{_lightline}%
        , #ffffff#{_lightness} #{_lightline}%
        , #ffffff#{_darkness}
      ),
      linear-gradient(to right
        , #000
        , ##{colors[r][0][ Math.ceil(cols/2)-1 ]} #{_darkline}%
        , ##{colors[r][0][ Math.floor(cols/2)  ]} #{_lightline}%
        , #fff
      );
    }
  //- 
  div(class=bgc): .gc

//- var sat = Math.floor( 255 *saturation /100 );
//- var _grayscale = Math.floor( (rgb[0] + rgb[1] + rgb[2]) / 3 );
//- var gra = Math.floor( ( 765-_grayscale ) *grayscale /1000 );