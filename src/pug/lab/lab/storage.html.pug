extends _html

block append vars
  -
    pageid      = 'lab/storage'
    pageUrl     = siteUrl + '/lab/storage.html'
    title       = `Storage`
    description = 'Testing storage'

block article
  article._article
    +btns
      button(onclick='test.storeAdd();' title="Add Store Item")._a3|Store
      button(onclick='test.storeGet();' title="Get Store Item")._a3|Get
      button(onclick='test.storeRemove();' title="Remove Store Item")._a3|Remove
      button(onclick='test.storeClear();' title="Clear Store")._a3|Clear
      button._a3(onclick="theme.change();") Change Theme
    hr._mb0
    section._scrollable(style="height:400px")#sec
      pre.pre#pre._container.
        // #{description} ..
        #[span#sec_storage]
    hr._mt0

block prepend script
  script.
    (()=>{

      const
        w = window,
        s = localStorage,
        { setItem, removeItem, clear } = s;

      function storageChanged(key, oldValue, newValue) {
        w.dispatchEvent(new CustomEvent('storageChanged', {
          detail: { key, oldValue, newValue }
        }));
      }

      s.setItem = function (key, value) {
        const oldValue = s.getItem(key);
        setItem.apply(this, arguments);
        storageChanged(key, oldValue, value);
      };

      s.removeItem = function (key) {
        const oldValue = s.getItem(key);
        removeItem.apply(this, arguments);
        storageChanged(key, oldValue, null);
      };

      s.clear = function () {
        clear.apply(this);
        storageChanged('*', null, null); // use * to clear all
      };

      // Also listen to cross-tab changes
      w.addEventListener('storage', (e) => {
        storageChanged(e.key, e.oldValue, e.newValue);
      });

    })();
  script.
    (()=>{
      let got;
      const
        w = window,
        d = document,
        assign = (target, obj) => Object.assign(target || {}, obj),
        stringify = (obj) => JSON.stringify(obj, null, 2),
        eid = (id) => d.getElementById(id),
        hid = (id,html) => eid(id).innerHTML=html,
        { log } = console,
        storage = localStorage,
        stg = eid('storage'),
        ste = eid('sec_storage'),
        storeAdd = () => {
          let
            x = Math.random().toString(36),
            k = x.substring(2, 7),
            v = x.substring(2, 10);
          got = { key:k, value:v };
          storage.setItem(k, v);
        },
        getRandomStoreKey = () => {
          return storage.key(Math.floor(Math.random() * storage.length));
        },
        storeGet = (key) => {
          const
            k = key || getRandomStoreKey(),
            v = k ? storage.getItem(k) : null;
            got = { key:k, value:v };
            updateLog();
        },
        storeRemove = (key) => {
          const
            k = key || storage.key(0);
            got = { key:k };
          const
            v = k ? storage.removeItem(k) : null;
        },
        storeClear = () => {
          got = null;
          storage.clear();
        },
        updateLog = () => {
          ste.innerHTML = [
            '',
            `theme: ${storage['theme']}\n`,
            `got: ${JSON.stringify(got)}\n`,
            `storage[${storage.length}]: `+stringify(storage)
          ].join('\n');
        };
      w.addEventListener("storageChanged", updateLog);
      d.addEventListener('DOMContentLoaded', ()=>{

        w.test = assign(w.test, {
          //- run,
          //- sync,
          //- reset,
          storeAdd,
          storeGet,
          storeRemove,
          storeClear,
          //- themeCurrent,
          //- themeChange,
          //- themeReset,
        });

        updateLog();

      });

    })();
  //- script.